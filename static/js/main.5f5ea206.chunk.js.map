{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","App","defaultState","name","testPositiv","positiv","negativ","patientHinzufügen","state","welcheListe","neueListe","adapter","connect","dispatch","testergebnisUmschalten","type","nameÄndern","patientLöschen","liste","index","patientBearbeiten","Eingabe","Grid","container","style","backgroundColor","item","TextField","fullWidth","label","value","onChange","e","target","FormControlLabel","control","Checkbox","checked","onClick","Button","Liste","props","was","map","patient","store","createStore","action","splice","eintrag","ReactDOM","render","Paper","padding","margin","xs","color","fontWeight","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f5ea206.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    </div>\n  )\n}\n\nexport default App;\n","\nimport * as serviceWorker from './serviceWorker';\n\nimport React    from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore }       from 'redux'\nimport { connect, Provider } from 'react-redux';\n\nimport TextField             from '@material-ui/core/TextField'\nimport Checkbox              from '@material-ui/core/Checkbox'\nimport FormControlLabel      from '@material-ui/core/FormControlLabel'\nimport Button                from '@material-ui/core/Button'\n\nimport Paper                 from '@material-ui/core/Paper'\nimport Grid                  from '@material-ui/core/Grid'\n\nimport EditIcon              from '@material-ui/icons/Edit'\nimport HighlightOffIcon      from '@material-ui/icons/HighlightOff'\nimport AddCircleOutlineIcon  from '@material-ui/icons/AddCircleOutline'\n\nimport './index.css';\n\nimport App from './App';\n\nconst defaultState = {\n  name:\"\",\n  testPositiv:false,\n  positiv:[ \"Ciamac\" ],\n  negativ:[ \"Shahin\" ]\n};\n\nfunction patientHinzufügen(state){\n  const welcheListe = state.testPositiv ? 'positiv' : 'negativ';\n  // Mit array.push würde Redux nicht verstehen dass der Array\n  // sich geändert hat.\n  const neueListe = [ ...state[welcheListe], state.name ];\n  return { ...state, [welcheListe]:neueListe };\n}\n\nfunction reducer ( state = defaultState, action ){\n  const { type, name, liste, index } = action;\n  let neueListe;\n  switch ( type ){\n    case \"nameÄndern\":\n      state = { ...state, name }; break;\n    case \"testergebnisUmschalten\":\n      state = { ...state, testPositiv: ! state.testPositiv }; break;\n    case \"patientHinzufügen\":      state = patientHinzufügen(state); break;\n    case \"patientBearbeiten\":\n      // Erstelle eine Kopie von der Liste, aus welcher wir den Patienten löschen wollen.\n      neueListe = [ ...state[liste] ]; // neueListe = state[liste].slice()\n      const [ eintrag ] = neueListe.splice( index, 1 );\n      state = {\n        ...state,\n        [liste]:     neueListe,\n        name:        eintrag,\n        testPositiv: liste === 'positiv'\n      };\n      break;\n    case \"patientLöschen\":\n      // Erstelle eine Kopie von der Liste, aus welcher wir den Patienten löschen wollen.\n      neueListe = [ ...state[liste] ]; // neueListe = state[liste].slice()\n      neueListe.splice( index, 1 );\n      state = { ...state, [liste]: neueListe };\n      break;\n    default:\n  }\n  return state;\n}\n\nfunction mapActionsToProps ( dispatch ){\n  return {\n    testergebnisUmschalten:       ()=> { dispatch({ type:\"testergebnisUmschalten\"             }) },\n    patientHinzufügen:            ()=> { dispatch({ type:\"patientHinzufügen\"                  }) },\n    nameÄndern:               (name)=> { dispatch({ type:\"nameÄndern\",            name        }) },\n    patientLöschen:    (liste,index)=> { dispatch({ type:\"patientLöschen\",        liste,index }) },\n    patientBearbeiten: (liste,index)=> { dispatch({ type:\"patientBearbeiten\",     liste,index }) },\n  }\n}\n\nconst mapStateToProps = state => state;\n\nconst adapter = connect(\n  mapStateToProps,\n  mapActionsToProps\n);\n\n/*\n  Die Eingabe Komponente ist dafür da neue Patienten zu erfassen,\n  oder bestehende Patienten zu bearbeiten.\n    - Sie ist mit redux durch den adapter verbunden und erhält somit\n      alle props und actions\n    - Wichtig: die Checkbox bekommt ihren Wert nich aus der value-prop\n      sondern aus der __ checked-prop __\n*/\n\nconst Eingabe = adapter( function({\n    name, nameÄndern,\n    testPositiv, testergebnisUmschalten,\n    patientHinzufügen\n}){\n  return (\n  <Grid container style={{backgroundColor:\"white\"}}>\n    <Grid item>\n      <TextField fullWidth\n        label=\"Name\"\n        value={name}\n        onChange={e => nameÄndern(e.target.value)}\n      />\n    </Grid>\n    <Grid item>\n      <FormControlLabel\n        control={\n        <Checkbox\n          value=\"positiv\"\n          checked={testPositiv}\n          onClick={testergebnisUmschalten}\n        />\n        }\n        label=\"Test Positiv\"\n      />\n    </Grid>\n    <Grid item>\n      <Button onClick={patientHinzufügen}>\n        <AddCircleOutlineIcon/>\n      </Button>\n    </Grid>\n  </Grid> );\n});\n\n/*\n  Die Liste Komponente soll für postiv und negativ getestete patienten benutzt werden.\n    - Die prop {was}(String) erhält entweder \"positiv\" oder \"negativ\"\n      diese prop wird später auch an die actions ( patientBearbeiten, patientLöschen )\n      weitergegeben. Ausserdem könne wir mit hilfe dieser prop den entsprechenden\n      Array (props.positiv, props.negativ) auswählen ( mittels props[was] )\n    - Deswegen destrukturieren wir ausnahmsweise mal nicht direkt,\n      sondern nehmen unsere props erstmal in die props Variable,\n      um dann die variablen die wir brauchen zu destrukturieren, bzw. lesen.\n*/\n\nconst Liste = adapter(\nfunction( props ){\n  const { patientLöschen, patientBearbeiten, was } = props;\n  const liste = props[was];\n  return (\n  <table>\n    <tr><th>{was}</th></tr>\n    { liste.map( (patient,index) =>\n      <tr>\n        <td>{patient}</td>\n        <td>\n          <Button onClick={ e => patientBearbeiten(was,index) }>\n            <EditIcon/>\n          </Button>\n          <Button onClick={ e => patientLöschen(was,index) }>\n            <HighlightOffIcon/>\n          </Button>\n        </td>\n      </tr>\n    )}\n  </table> );\n});\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Paper style={{padding:'5px',margin:'5px'}}>\n      <Eingabe/>\n    </Paper>\n      <Grid container>\n        <Grid item xs={6}>\n          <Paper style={{padding:'5px',margin:'5px', backgroundColor:\"red\", color:\"white\", fontWeight:\"bolder\"}}>\n            <Liste was=\"positiv\"/>\n          </Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper style={{padding:'5px',margin:'5px', backgroundColor:\"green\" ,color:\"white\", fontWeight:\"bolder\"}}>\n            <Liste was=\"negativ\"/>\n          </Paper>\n        </Grid>\n      </Grid>\n  </Provider>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}